<?xml version="1.0"?>
<launch>
  <arg name="scene" default="empty_table"/>

  <!-- By default, we are not in debug mode -->
  <arg name="debug" value="false" />

  <!--Robot description and related parameter files -->
  <arg name="joint_limit_params" value="$(find ur_description)/config/ur5/joint_limits.yaml"/>
  <arg name="kinematics_params" value="$(find ur_description)/config/ur5/default_kinematics.yaml"/>
  <arg name="physical_params" value="$(find ur_description)/config/ur5/physical_parameters.yaml"/>
  <arg name="visual_params" value="$(find ur_description)/config/ur5/visual_parameters.yaml"/>

  <!-- Controller configuration -->
  <arg name="controller_config_file" value="$(find cobot-description)/config/ur5_gazebo_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" value="joint_state_controller pos_joint_traj_controller" doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" value="joint_group_pos_controller" doc="Controllers that are initally loaded, but not started."/>

  <!-- robot_state_publisher configuration -->
  <arg name="tf_prefix" value="" doc="tf_prefix used for the robot."/>
  <arg name="tf_pub_rate" value="125" doc="Rate at which robot_state_publisher should publish transforms."/>

  <!-- Gazebo parameters -->
  <arg name="paused" value="true" doc="Starts Gazebo in paused mode" />
  <arg name="gui" value="true" doc="Starts Gazebo gui" />

  <!-- Load urdf on the parameter server -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find cobot-description)/urdf/ur5.xacro'"/>
  <param  name="table_description" 
          command="$(find xacro)/xacro '$(find cobot-env)/urdf/e-waste-setup.xacro'" 
          if="$(eval arg('scene')=='e_waste')"/>
  <param  name="table_description" 
          command="$(find xacro)/xacro '$(find cobot-env)/urdf/table.xacro'" 
          if="$(eval arg('scene')=='empty_table')"/>
  
  <arg name="load_robot_description" value="false"/>

  <!-- Gazebo parameters -->
  <arg name="gazebo_model_name" value="ur5" doc="The name to give to the model in Gazebo (after spawning it)." />
  <arg name="gazebo_world" value="$(find cobot-env)/worlds/actor_example.world" doc="The '.world' file to load in Gazebo." />
  <arg name="robot_description_param_name" value="robot_description" doc="Name of the parameter which contains the robot description (ie: URDF) which should be spawned into Gazebo." />
  
  <!-- Load controller settings -->
  <rosparam file="$(arg controller_config_file)" command="load"/>

  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="$(arg tf_pub_rate)" />
    <param name="tf_prefix" value="$(arg tf_prefix)" />
  </node>

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find ur5_ag95_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="false"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
    <arg name="load_robot_description" value="$(arg load_robot_description)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find ur5_ag95_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="$(find ur5_ag95_moveit_config)/launch/moveit_practice.rviz"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Start Gazebo and load the empty world if requested to do so -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg gazebo_world)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- Load and start the controllers listed in the 'controllers' arg. -->
  <node name="ros_control_controller_spawner" pkg="controller_manager" type="spawner"
    args="$(arg controllers)" output="screen" respawn="false" />

  <!-- Load other controllers, but do not start them -->
  <node name="ros_control_stopped_spawner" pkg="controller_manager" type="spawner"
    args="--stopped $(arg stopped_controllers)" output="screen" respawn="false" />

  <group if="$(eval arg('scene')=='empty_table')">
    <node name="spawn_ur5_model" pkg="gazebo_ros" type="spawn_model"
      args="
        -urdf
        -param $(arg robot_description_param_name)
        -model $(arg gazebo_model_name)
        -z 0.938"
      output="screen" respawn="false" />

      <node pkg="cobot-env" 
        type="build_scene.py" 
        name="scene_builder"/>
  </group>

  <group if="$(eval arg('scene')=='e_waste')">
    <node name="spawn_ur5_model" pkg="gazebo_ros" type="spawn_model"
      args="
        -urdf
        -param $(arg robot_description_param_name)
        -model $(arg gazebo_model_name)
        -J shoulder_lift_joint -1.5708
        -J wrist_1_joint -1.5708
        -z 0.938"
      output="screen" respawn="false" />

      <node pkg="cobot-env" 
        type="build_e_waste_scene.py" 
        name="scene_builder"/>
  </group>

  <node name="spawn_table_model" pkg="gazebo_ros" type="spawn_model"
    args="
      -urdf
      -param table_description
      -model table
      -z 0.935 -Y 0.785398"
    output="screen" respawn="false" />
  
</launch>
